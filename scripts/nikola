#!/usr/bin/env python

"""Nikola main script."""

from __future__ import print_function
import os
import sys

# LIBDIR trick start (marker for removal on platforms that don't need it)
libdir = '@LIBDIR@'

# Two cases:
if libdir != '@' 'LIBDIR' '@':
    # Changed by our distutils hook, then use the given path.

    if not os.path.isabs(libdir):
        libdir = os.path.join(os.path.dirname(
            os.path.realpath(__file__)), libdir)
        libdir = os.path.abspath(libdir)
else:
    # Unchanged, running from checkout,
    # use the parent directory, the nikola package ought be there.
    libdir = os.path.join(os.path.dirname(__file__), "..")

sys.path.insert(0, libdir)

if "PYTHONPATH" not in os.environ:
    os.environ["PYTHONPATH"] = libdir
else:
    os.environ["PYTHONPATH"] = os.environ["PYTHONPATH"] + ":" + libdir

# LIBDIR trick end (marker for removal on platforms that don't need it)

import nikola


from doit.loader import generate_tasks
from doit.cmd_base import TaskLoader, Command as DoitCommand
from doit.reporter import ExecutedOnlyReporter
from doit.doit_cmd import DoitMain

import nikola
from nikola.plugin_categories import Command

# TODO
def print_help(site):
    print("Usage: nikola command [options]")
    print()
    print("Available commands:")
    print()
    keys = sorted(site.commands.keys())
    for name in keys:
        print("nikola %s: %s" % (name, site.commands[name].short_help))
    print()
    print("For detailed help for a command, use nikola command --help")

class NikolaTaskLoader(TaskLoader):
    """custom task loader to get tasks from Nikola instead of dodo.py file"""
    def __init__(self, nikola):
        self.nikola = nikola

    def load_tasks(self, cmd, opt_values, pos_args):
        DOIT_CONFIG = {
            'reporter': ExecutedOnlyReporter,
            'default_tasks': ['render_site'],
            }
        tasks = generate_tasks('render_site', self.nikola.gen_tasks())
        return tasks, DOIT_CONFIG

class DoitNikola(DoitMain):
    TASK_LOADER = NikolaTaskLoader
    def __init__(self, nikola):
        self.nikola = nikola
        self.task_loader = self.TASK_LOADER(nikola)

    def get_commands(self):
        # core doit commands
        cmds = DoitMain.get_commands(self)

        # load nikola commands
        for name, cmd in self.nikola.commands.iteritems():
            cmds[name] = cmd
        return cmds


if __name__ == "__main__":
    try:
        sys.path.append('')
        import conf
        config = conf.__dict__
    except ImportError:
        config = {}

    site = nikola.Nikola(**config)
    DoitNikola(site).run(sys.argv[1:])
